version: '3.8'

services:
  # Django Web Application
  web:
    build: .
    container_name: core_web
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles
      - ./db.sqlite3:/app/db.sqlite3
    environment:
      - DJANGO_SETTINGS_MODULE=core_project.settings
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
      - db
    networks:
      - core_network

  # Celery Worker
  celery_worker:
    build: .
    container_name: core_celery_worker
    restart: unless-stopped
    command: celery -A core_project worker --loglevel=info --concurrency=10
    volumes:
      - ./media:/app/media
      - ./db.sqlite3:/app/db.sqlite3
    environment:
      - DJANGO_SETTINGS_MODULE=core_project.settings
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
      - db
    networks:
      - core_network

  # Celery Beat Scheduler
  celery_beat:
    build: .
    container_name: core_celery_beat
    restart: unless-stopped
    command: celery -A core_project beat --loglevel=info --scheduler=django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./db.sqlite3:/app/db.sqlite3
    environment:
      - DJANGO_SETTINGS_MODULE=core_project.settings
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
      - db
    networks:
      - core_network

  # Redis (Message Broker)
  redis:
    image: redis:7-alpine
    container_name: core_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - core_network

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: core_db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=core_db
      - POSTGRES_USER=core_user
      - POSTGRES_PASSWORD=core_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - core_network

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: core_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - core_network

  # Grafana (Monitoring Dashboard)
  grafana:
    image: grafana/grafana:latest
    container_name: core_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - core_network

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: core_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./staticfiles:/app/staticfiles:ro
      - ./media:/app/media:ro
    depends_on:
      - web
    networks:
      - core_network

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  core_network:
    driver: bridge
